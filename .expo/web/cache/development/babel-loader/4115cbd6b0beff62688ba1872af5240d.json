{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar devsupport_1 = require(\"../../devsupport\");\n\nvar SEPARATOR = ', ';\n\nvar SelectService = _createClass(function SelectService() {\n  var _this = this;\n\n  _classCallCheck(this, SelectService);\n\n  this.selectItem = function (multiSelect, descriptor, selected) {\n    if (multiSelect) {\n      return _this.createMultiSelectIndices(descriptor, selected);\n    }\n\n    return descriptor.index;\n  };\n\n  this.toStringSelected = function (selected) {\n    if (!Array.isArray(selected)) {\n      return '';\n    }\n\n    var options = selected.map(function (index) {\n      return \"Option \" + index.toString();\n    });\n    return options.join(SEPARATOR);\n  };\n\n  this.isSelected = function (descriptor, selected) {\n    if (descriptor.multiSelect && _this.isGroup(descriptor)) {\n      return _this.containsSomeFromGroup(descriptor.index, selected);\n    }\n\n    return _this.contains(descriptor.index, selected);\n  };\n\n  this.isDisabled = function (descriptor) {\n    return !descriptor.multiSelect && _this.isGroup(descriptor);\n  };\n\n  this.createDescriptorForElement = function (element, multiSelect, index) {\n    var groupIndices = react_1.default.Children.map(element.props.children, function (child, row) {\n      return new devsupport_1.IndexPath(row, index);\n    });\n    return {\n      multiSelect: multiSelect,\n      groupIndices: groupIndices,\n      index: new devsupport_1.IndexPath(index)\n    };\n  };\n\n  this.createDescriptorForNestedElement = function (element, descriptor, index) {\n    return _extends({}, descriptor, {\n      index: new devsupport_1.IndexPath(index, descriptor.index.row),\n      groupIndices: []\n    });\n  };\n\n  this.createMultiSelectIndices = function (descriptor, selected) {\n    var isIndexSelected = _this.isSelected(descriptor, selected);\n\n    return !isIndexSelected ? _this.addIndex(descriptor, selected) : _this.removeIndex(descriptor, selected);\n  };\n\n  this.isGroup = function (descriptor) {\n    return descriptor.groupIndices && descriptor.groupIndices.length > 0;\n  };\n\n  this.createGroupIndices = function (descriptor) {\n    return _this.isGroup(descriptor) ? descriptor.groupIndices : [descriptor.index];\n  };\n\n  this.addIndex = function (descriptor, selected) {\n    return [].concat(_toConsumableArray(selected), _toConsumableArray(_this.createGroupIndices(descriptor)));\n  };\n\n  this.removeIndex = function (descriptor, selected) {\n    var groupIndices = _this.createGroupIndices(descriptor);\n\n    return selected.filter(function (selectedIndex) {\n      return !_this.contains(selectedIndex, groupIndices);\n    });\n  };\n\n  this.contains = function (index, selected) {\n    return selected.some(function (selectedIndex) {\n      return selectedIndex.equals(index);\n    });\n  };\n\n  this.containsSomeFromGroup = function (index, selected) {\n    return selected.some(function (selectedIndex) {\n      return selectedIndex.section === index.row;\n    });\n  };\n});\n\nexports.SelectService = SelectService;","map":{"version":3,"sources":["../../../../../src/components/ui/select/select.service.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importDefault(require(\"react\"));\nconst devsupport_1 = require(\"../../devsupport\");\nconst SEPARATOR = ', ';\nclass SelectService {\n    constructor() {\n        this.selectItem = (multiSelect, descriptor, selected) => {\n            if (multiSelect) {\n                return this.createMultiSelectIndices(descriptor, selected);\n            }\n            return descriptor.index;\n        };\n        this.toStringSelected = (selected) => {\n            if (!Array.isArray(selected)) {\n                return '';\n            }\n            const options = selected.map((index) => {\n                return `Option ${index.toString()}`;\n            });\n            return options.join(SEPARATOR);\n        };\n        this.isSelected = (descriptor, selected) => {\n            if (descriptor.multiSelect && this.isGroup(descriptor)) {\n                return this.containsSomeFromGroup(descriptor.index, selected);\n            }\n            return this.contains(descriptor.index, selected);\n        };\n        this.isDisabled = (descriptor) => {\n            return !descriptor.multiSelect && this.isGroup(descriptor);\n        };\n        this.createDescriptorForElement = (element, multiSelect, index) => {\n            const groupIndices = react_1.default.Children.map(element.props.children, ((child, row) => {\n                return new devsupport_1.IndexPath(row, index);\n            }));\n            return { multiSelect, groupIndices, index: new devsupport_1.IndexPath(index) };\n        };\n        this.createDescriptorForNestedElement = (element, descriptor, index) => {\n            return {\n                ...descriptor,\n                index: new devsupport_1.IndexPath(index, descriptor.index.row),\n                groupIndices: [],\n            };\n        };\n        this.createMultiSelectIndices = (descriptor, selected) => {\n            const isIndexSelected = this.isSelected(descriptor, selected);\n            return !isIndexSelected ? this.addIndex(descriptor, selected) : this.removeIndex(descriptor, selected);\n        };\n        this.isGroup = (descriptor) => {\n            return descriptor.groupIndices && descriptor.groupIndices.length > 0;\n        };\n        this.createGroupIndices = (descriptor) => {\n            return this.isGroup(descriptor) ? descriptor.groupIndices : [descriptor.index];\n        };\n        this.addIndex = (descriptor, selected) => {\n            return [...selected, ...this.createGroupIndices(descriptor)];\n        };\n        this.removeIndex = (descriptor, selected) => {\n            const groupIndices = this.createGroupIndices(descriptor);\n            return selected.filter((selectedIndex) => {\n                return !this.contains(selectedIndex, groupIndices);\n            });\n        };\n        this.contains = (index, selected) => {\n            return selected.some((selectedIndex) => {\n                return selectedIndex.equals(index);\n            });\n        };\n        this.containsSomeFromGroup = (index, selected) => {\n            return selected.some((selectedIndex) => {\n                return selectedIndex.section === index.row;\n            });\n        };\n    }\n}\nexports.SelectService = SelectService;\n//# sourceMappingURL=select.service.js.map"]},"metadata":{},"sourceType":"script"}