{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _EmitterSubscription = _interopRequireDefault(require(\"./EmitterSubscription\"));\n\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./EventSubscriptionVendor\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n  };\n\n  _proto.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      listener.apply(context, args);\n    });\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    (0, _invariant.default)(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  };\n\n  _proto.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(sparseFilterPredicate).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  };\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  };\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nvar _default = EventEmitter;\nexports.default = _default;","map":{"version":3,"names":["sparseFilterPredicate","EventEmitter","subscriber","_subscriber","EventSubscriptionVendor","_proto","prototype","addListener","eventType","listener","context","addSubscription","EmitterSubscription","once","_this","removeCurrentListener","_len","arguments","length","args","Array","_key","apply","removeAllListeners","removeAllSubscriptions","invariant","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","map","emit","i","l","slice","call","removeListener","remove"],"sources":["C:/wks/reactnative/prueba/kitten2/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\n'use strict';\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\nimport invariant from 'fbjs/lib/invariant';\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\n\nvar EventEmitter = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  ;\n\n  _proto.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      listener.apply(context, args);\n    });\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  ;\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  }\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  ;\n\n  _proto.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    .filter(sparseFilterPredicate).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  }\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"],"mappings":"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"},"metadata":{},"sourceType":"script"}