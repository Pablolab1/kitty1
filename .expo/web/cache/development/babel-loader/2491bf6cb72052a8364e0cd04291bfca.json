{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoadFontsTask = exports.LoadAssetsTask = exports.AppLoading = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _expoAppLoading = _interopRequireDefault(require(\"expo-app-loading\"));\n\nvar SplashScreen = _interopRequireWildcard(require(\"expo-splash-screen\"));\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar _expoAsset = require(\"expo-asset\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\wks\\\\reactnative\\\\prueba\\\\kitten2\\\\src\\\\app\\\\app-loading.component.expo.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar LoadFontsTask = function LoadFontsTask(fonts) {\n  return Font.loadAsync(fonts).then(function () {\n    return null;\n  });\n};\n\nexports.LoadFontsTask = LoadFontsTask;\n\nvar LoadAssetsTask = function LoadAssetsTask(assets) {\n  var tasks = assets.map(function (source) {\n    return _expoAsset.Asset.fromModule(source).downloadAsync().then();\n  });\n  return Promise.all(tasks).then(function () {\n    return null;\n  });\n};\n\nexports.LoadAssetsTask = LoadAssetsTask;\n\nvar AppLoading = function AppLoading(props) {\n  var _React$useState = _react.default.useState(true),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var loadingResult = _react.default.useRef(props.initialConfig || {});\n\n  var onTasksFinish = function onTasksFinish() {\n    setLoading(false);\n    SplashScreen.hideAsync();\n  };\n\n  var saveTaskResult = function saveTaskResult(result) {\n    if (result) {\n      loadingResult.current[result[0]] = result[1];\n    }\n  };\n\n  var startTasks = function startTasks() {\n    return Promise.all(props.tasks.map(function (task) {\n      return task().then(saveTaskResult);\n    })).then();\n  };\n\n  var renderLoadingElement = function renderLoadingElement() {\n    return _react.default.createElement(_expoAppLoading.default, {\n      autoHideSplash: false,\n      startAsync: startTasks,\n      onFinish: onTasksFinish,\n      onError: console.error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    });\n  };\n\n  return _react.default.createElement(_react.default.Fragment, null, loading ? renderLoadingElement() : props.children(loadingResult.current), props.placeholder && props.placeholder({\n    loading: loading\n  }));\n};\n\nexports.AppLoading = AppLoading;\nAppLoading.defaultProps = {\n  tasks: [],\n  initialConfig: {}\n};","map":{"version":3,"names":["LoadFontsTask","fonts","Font","loadAsync","then","LoadAssetsTask","assets","tasks","map","source","Asset","fromModule","downloadAsync","Promise","all","AppLoading","props","React","useState","loading","setLoading","loadingResult","useRef","initialConfig","onTasksFinish","SplashScreen","hideAsync","saveTaskResult","result","current","startTasks","task","renderLoadingElement","console","error","children","placeholder","defaultProps"],"sources":["C:/wks/reactnative/prueba/kitten2/src/app/app-loading.component.expo.tsx"],"sourcesContent":["import React from 'react';\nimport ExpoAppLoading from 'expo-app-loading';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport { Task, TaskResult} from './app-loading.component';\n\nexport interface ApplicationLoaderProps<LoadableConfiguration = any> {\n  tasks?: Task[];\n  initialConfig?: LoadableConfiguration;\n  placeholder?: (props: { loading: boolean }) => React.ReactElement;\n  children: (config: LoadableConfiguration) => React.ReactElement;\n}\n\nexport const LoadFontsTask = (fonts: { [key: string]: number }): Promise<TaskResult> => {\n  return Font.loadAsync(fonts).then(() => null);\n};\n\nexport const LoadAssetsTask = (assets: number[]): Promise<TaskResult> => {\n  const tasks: Promise<void>[] = assets.map((source: number): Promise<void> => {\n    return Asset.fromModule(source).downloadAsync().then();\n  });\n\n  return Promise.all(tasks).then(() => null);\n};\n\n/**\n * Loads application configuration and returns content of the application when done.\n *\n * @property {Task[]} tasks - Array of tasks to prepare application before it's loaded.\n * A single task should return a Promise with value and a by which this value is accessible.\n *\n * @property {LoadableConfiguration} initialConfig - Configuration to use by default.\n * May be useful at first run.\n *\n * @property {(props: { loaded: boolean }) => React.ReactElement} placeholder - Element to render\n * while application is loading.\n *\n * @property {(config: LoadableConfiguration) => React.ReactElement} children - Should return Application component\n */\nexport const AppLoading: React.FC<ApplicationLoaderProps> = (props) => {\n\n  const [loading, setLoading] = React.useState<boolean>(true);\n  const loadingResult = React.useRef(props.initialConfig || {});\n\n  const onTasksFinish = (): void => {\n    setLoading(false);\n    SplashScreen.hideAsync();\n  };\n\n  const saveTaskResult = (result: TaskResult | null): void => {\n    if (result) {\n      loadingResult.current[result[0]] = result[1];\n    }\n  };\n\n  const startTasks = (): Promise<void> => {\n    return Promise.all(props.tasks.map(task => task().then(saveTaskResult)))\n    .then();\n  };\n\n  const renderLoadingElement = (): React.ReactElement => (\n    <ExpoAppLoading\n      autoHideSplash={false}\n      startAsync={startTasks}\n      onFinish={onTasksFinish}\n      onError={console.error}\n    />\n  );\n\n  return (\n    <>\n      {loading ? renderLoadingElement() : props.children(loadingResult.current)}\n      {props.placeholder && props.placeholder({ loading })}\n    </>\n  );\n};\n\nAppLoading.defaultProps = {\n  tasks: [],\n  initialConfig: {},\n};\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;AAUO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAA2D;EACtF,OAAOC,IAAI,CAACC,SAAL,CAAeF,KAAf,EAAsBG,IAAtB,CAA2B;IAAA,OAAM,IAAN;EAAA,CAA3B,CAAP;AACD,CAFM;;;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAA2C;EACvE,IAAMC,KAAsB,GAAGD,MAAM,CAACE,GAAP,CAAW,UAACC,MAAD,EAAmC;IAC3E,OAAOC,gBAAA,CAAMC,UAAN,CAAiBF,MAAjB,EAAyBG,aAAzB,GAAyCR,IAAzC,EAAP;EACD,CAF8B,CAA/B;EAIA,OAAOS,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAAmBH,IAAnB,CAAwB;IAAA,OAAM,IAAN;EAAA,CAAxB,CAAP;AACD,CANM;;;;AAsBA,IAAMW,UAA4C,GAAG,SAA/CA,UAA+C,CAACC,KAAD,EAAW;EAErE,sBAA8BC,cAAA,CAAMC,QAAN,CAAwB,IAAxB,CAA9B;EAAA;EAAA,IAAOC,OAAP;EAAA,IAAgBC,UAAhB;;EACA,IAAMC,aAAa,GAAGJ,cAAA,CAAMK,MAAN,CAAaN,KAAK,CAACO,aAAN,IAAuB,EAApC,CAAtB;;EAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAY;IAChCJ,UAAU,CAAC,KAAD,CAAV;IACAK,YAAY,CAACC,SAAb;EACD,CAHD;;EAKA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAqC;IAC1D,IAAIA,MAAJ,EAAY;MACVP,aAAa,CAACQ,OAAd,CAAsBD,MAAM,CAAC,CAAD,CAA5B,IAAmCA,MAAM,CAAC,CAAD,CAAzC;IACD;EACF,CAJD;;EAMA,IAAME,UAAU,GAAG,SAAbA,UAAa,GAAqB;IACtC,OAAOjB,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACT,KAAN,CAAYC,GAAZ,CAAgB,UAAAuB,IAAI;MAAA,OAAIA,IAAI,GAAG3B,IAAP,CAAYuB,cAAZ,CAAJ;IAAA,CAApB,CAAZ,EACNvB,IADM,EAAP;EAED,CAHD;;EAKA,IAAM4B,oBAAoB,GAAG,SAAvBA,oBAAuB;IAAA,OAC3B,6BAAC,uBAAD;MACE,cAAc,EAAE,KADlB;MAEE,UAAU,EAAEF,UAFd;MAGE,QAAQ,EAAEN,aAHZ;MAIE,OAAO,EAAES,OAAO,CAACC,KAJnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAD2B;EAAA,CAA7B;;EASA,OACE,4DACGf,OAAO,GAAGa,oBAAoB,EAAvB,GAA4BhB,KAAK,CAACmB,QAAN,CAAed,aAAa,CAACQ,OAA7B,CADtC,EAEGb,KAAK,CAACoB,WAAN,IAAqBpB,KAAK,CAACoB,WAAN,CAAkB;IAAEjB,OAAO,EAAPA;EAAF,CAAlB,CAFxB,CADF;AAMD,CApCM;;;AAsCPJ,UAAU,CAACsB,YAAX,GAA0B;EACxB9B,KAAK,EAAE,EADiB;EAExBgB,aAAa,EAAE;AAFS,CAA1B"},"metadata":{},"sourceType":"script"}