{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Theming = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNativeAppearance = require(\"react-native-appearance\");\n\nvar _appStorage = require(\"./app-storage.service\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar Theming = (0, _createClass2.default)(function Theming() {\n  (0, _classCallCheck2.default)(this, Theming);\n});\nexports.Theming = Theming;\nTheming.MappingContext = _react.default.createContext(null);\nTheming.ThemeContext = _react.default.createContext(null);\n\nTheming.useMapping = function (mappings, mapping) {\n  var setCurrentMapping = function setCurrentMapping(nextMapping) {\n    _appStorage.AppStorage.setMapping(nextMapping);\n  };\n\n  var isEva = function isEva() {\n    return mapping === 'eva';\n  };\n\n  var mappingContext = {\n    currentMapping: mapping,\n    setCurrentMapping: setCurrentMapping,\n    isEva: isEva\n  };\n  return [mappingContext, mappings[mapping]];\n};\n\nTheming.useTheming = function (themes, mapping, theme) {\n  var _React$useState = _react.default.useState(theme),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      currentTheme = _React$useState2[0],\n      _setCurrentTheme = _React$useState2[1];\n\n  _react.default.useEffect(function () {\n    var subscription = _reactNativeAppearance.Appearance.addChangeListener(function (preferences) {\n      var appearanceTheme = Theming.createAppearanceTheme(preferences.colorScheme, theme);\n\n      _setCurrentTheme(appearanceTheme);\n    });\n\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n\n  var isDarkMode = function isDarkMode() {\n    return currentTheme === 'dark';\n  };\n\n  var createTheme = function createTheme(upstreamTheme) {\n    return _objectSpread(_objectSpread({}, themes[mapping][currentTheme]), themes[mapping][upstreamTheme][currentTheme]);\n  };\n\n  var themeContext = {\n    currentTheme: currentTheme,\n    setCurrentTheme: function setCurrentTheme(nextTheme) {\n      _appStorage.AppStorage.setTheme(nextTheme);\n\n      _setCurrentTheme(nextTheme);\n    },\n    isDarkMode: isDarkMode,\n    createTheme: createTheme\n  };\n  return [themeContext, themes[mapping][currentTheme]];\n};\n\nTheming.useTheme = function (upstreamTheme) {\n  var themeContext = _react.default.useContext(Theming.ThemeContext);\n\n  return themeContext.createTheme(upstreamTheme);\n};\n\nTheming.createAppearanceTheme = function (appearance, preferredTheme) {\n  if (appearance === 'no-preference') {\n    return preferredTheme;\n  }\n\n  return appearance;\n};","map":{"version":3,"names":["Theming","MappingContext","React","createContext","ThemeContext","useMapping","mappings","mapping","setCurrentMapping","nextMapping","AppStorage","setMapping","isEva","mappingContext","currentMapping","useTheming","themes","theme","useState","currentTheme","setCurrentTheme","useEffect","subscription","Appearance","addChangeListener","preferences","appearanceTheme","createAppearanceTheme","colorScheme","remove","isDarkMode","createTheme","upstreamTheme","themeContext","nextTheme","setTheme","useTheme","useContext","appearance","preferredTheme"],"sources":["C:/wks/reactnative/prueba/kitten2/src/services/theme.service.ts"],"sourcesContent":["import React from 'react';\nimport { Appearance, AppearancePreferences, ColorSchemeName } from 'react-native-appearance';\nimport { AppStorage } from './app-storage.service';\n\nexport type Mapping = 'eva' | 'material';\nexport type Theme = 'light' | 'dark' | 'brand';\n\nexport interface MappingContextValue {\n  /**\n   * Should return the name of current mapping\n   */\n  currentMapping: Mapping;\n  /**\n   * Should switch mapping globally\n   */\n  setCurrentMapping: (mapping: Mapping) => void;\n  /**\n   * Should return true if current mapping is Eva\n   */\n  isEva: () => boolean;\n}\n\nexport interface ThemeContextValue {\n  /**\n   * Should return the name of current theme\n   */\n  currentTheme: Theme;\n  /**\n   * Should switch theme globally\n   */\n  setCurrentTheme: (theme: Theme) => void;\n  /**\n   * Should return true if current theme is dark or dark mode enabled\n   */\n  isDarkMode: () => boolean;\n  /**\n   * Should create a theme based on current\n   */\n  createTheme: (upstreamTheme: Theme) => any;\n}\n\nexport class Theming {\n\n  static MappingContext = React.createContext<MappingContextValue>(null);\n  static ThemeContext = React.createContext<ThemeContextValue>(null);\n\n  /**\n   * @see MappingContextValue\n   *\n   * Creates context value with standard configuration:\n   *\n   * - `currentMapping` is set depending `mapping` argument.\n   * - `setCurrentMapping` will be called when device appearance is changed.\n   * - `isEva` returns true if current mapping is `eva`.\n   *\n   * @param {Record<Mapping, any>} mappings - set of mappings available in app.\n   * @param {Mapping} mapping - mapping name to use. Could be `eva` or `material`.\n   *\n   * @returns {[MappingContextValue, any]} - array of two values:\n   * - value to be set in `MappingContext.Provider`\n   * - and `mapping` and `customMapping` to be set in `ApplicationProvider`.\n   */\n  static useMapping = (mappings: Record<Mapping, any>,\n                       mapping: Mapping): [MappingContextValue, any] => {\n\n    /**\n     * Currently, there is no way to switch during the run time,\n     * so the Async Storage and Expo Updates is used.\n     *\n     * Writes mapping to AsyncStorage and reloads an app\n     */\n    const setCurrentMapping = (nextMapping: Mapping): void => {\n      AppStorage.setMapping(nextMapping);\n    };\n\n    const isEva = (): boolean => {\n      return mapping === 'eva';\n    };\n\n    const mappingContext: MappingContextValue = {\n      currentMapping: mapping,\n      setCurrentMapping,\n      isEva,\n    };\n\n    return [mappingContext, mappings[mapping]];\n  };\n\n  /**\n   * @see ThemeContextValue\n   *\n   * Creates context value with standard configuration:\n   *\n   * - `currentTheme` is set depending on current appearance set on the device.\n   * - `setCurrentTheme` will be called when device appearance is changed.\n   * - `isDarkMode` returns true if current device appearance is `dark`.\n   * - `createTheme` will take an `upstreamTheme` and merge it with `currentTheme`.\n   *\n   * @param {Record<Mapping, Record<Theme, any>>} themes - set of themes available in app.\n   * @param {Mapping} mapping - mapping name to use. Could be `Eva` or `Material`.\n   * @param {Theme} theme - name of theme that will be applied if there is no preferred appearance set.\n   *\n   * @returns {[ThemeContextValue, any]} - array of two values:\n   * - value to be set in `ThemeContext.Provider`\n   * - and theme to be set in `ApplicationProvider`.\n   */\n  static useTheming = (themes: Record<Mapping, Record<Theme, any>>,\n                       mapping: Mapping,\n                       theme: Theme): [ThemeContextValue, any] => {\n\n    const [currentTheme, setCurrentTheme] = React.useState<Theme>(theme);\n\n    React.useEffect(() => {\n      const subscription = Appearance.addChangeListener((preferences: AppearancePreferences): void => {\n        const appearanceTheme: Theme = Theming.createAppearanceTheme(\n          preferences.colorScheme,\n          theme,\n        );\n        setCurrentTheme(appearanceTheme);\n      });\n\n      return () => subscription.remove();\n    }, []);\n\n    const isDarkMode = (): boolean => {\n      return currentTheme === 'dark';\n    };\n\n    const createTheme = (upstreamTheme: Theme): any => {\n      return { ...themes[mapping][currentTheme], ...themes[mapping][upstreamTheme][currentTheme] };\n    };\n\n    const themeContext: ThemeContextValue = {\n      currentTheme,\n      setCurrentTheme: (nextTheme) => {\n        AppStorage.setTheme(nextTheme);\n        setCurrentTheme(nextTheme);\n      },\n      isDarkMode,\n      createTheme,\n    };\n\n    return [themeContext, themes[mapping][currentTheme]];\n  };\n\n  static useTheme = (upstreamTheme: Theme): any => {\n    const themeContext: ThemeContextValue = React.useContext(Theming.ThemeContext);\n    return themeContext.createTheme(upstreamTheme);\n  };\n\n  private static createAppearanceTheme = (appearance: ColorSchemeName,\n                                          preferredTheme: Theme): Theme => {\n    if (appearance === 'no-preference') {\n      return preferredTheme;\n    }\n    return appearance;\n  };\n}\n\n\n\n\n"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;IAuCaA,O;;;;AAAAA,O,CAEJC,c,GAAiBC,cAAA,CAAMC,aAAN,CAAyC,IAAzC,C;AAFbH,O,CAGJI,Y,GAAeF,cAAA,CAAMC,aAAN,CAAuC,IAAvC,C;;AAHXH,O,CAqBJK,U,GAAa,UAACC,QAAD,EACCC,OADD,EACkD;EAQpE,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,WAAD,EAAgC;IACxDC,sBAAA,CAAWC,UAAX,CAAsBF,WAAtB;EACD,CAFD;;EAIA,IAAMG,KAAK,GAAG,SAARA,KAAQ,GAAe;IAC3B,OAAOL,OAAO,KAAK,KAAnB;EACD,CAFD;;EAIA,IAAMM,cAAmC,GAAG;IAC1CC,cAAc,EAAEP,OAD0B;IAE1CC,iBAAiB,EAAjBA,iBAF0C;IAG1CI,KAAK,EAALA;EAH0C,CAA5C;EAMA,OAAO,CAACC,cAAD,EAAiBP,QAAQ,CAACC,OAAD,CAAzB,CAAP;AACD,C;;AA7CUP,O,CAiEJe,U,GAAa,UAACC,MAAD,EACCT,OADD,EAECU,KAFD,EAE4C;EAE9D,sBAAwCf,cAAA,CAAMgB,QAAN,CAAsBD,KAAtB,CAAxC;EAAA;EAAA,IAAOE,YAAP;EAAA,IAAqBC,gBAArB;;EAEAlB,cAAA,CAAMmB,SAAN,CAAgB,YAAM;IACpB,IAAMC,YAAY,GAAGC,iCAAA,CAAWC,iBAAX,CAA6B,UAACC,WAAD,EAA8C;MAC9F,IAAMC,eAAsB,GAAG1B,OAAO,CAAC2B,qBAAR,CAC7BF,WAAW,CAACG,WADiB,EAE7BX,KAF6B,CAA/B;;MAIAG,gBAAe,CAACM,eAAD,CAAf;IACD,CANoB,CAArB;;IAQA,OAAO;MAAA,OAAMJ,YAAY,CAACO,MAAb,EAAN;IAAA,CAAP;EACD,CAVD,EAUG,EAVH;;EAYA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAe;IAChC,OAAOX,YAAY,KAAK,MAAxB;EACD,CAFD;;EAIA,IAAMY,WAAW,GAAG,SAAdA,WAAc,CAACC,aAAD,EAA+B;IACjD,uCAAYhB,MAAM,CAACT,OAAD,CAAN,CAAgBY,YAAhB,CAAZ,GAA8CH,MAAM,CAACT,OAAD,CAAN,CAAgByB,aAAhB,EAA+Bb,YAA/B,CAA9C;EACD,CAFD;;EAIA,IAAMc,YAA+B,GAAG;IACtCd,YAAY,EAAZA,YADsC;IAEtCC,eAAe,EAAE,yBAACc,SAAD,EAAe;MAC9BxB,sBAAA,CAAWyB,QAAX,CAAoBD,SAApB;;MACAd,gBAAe,CAACc,SAAD,CAAf;IACD,CALqC;IAMtCJ,UAAU,EAAVA,UANsC;IAOtCC,WAAW,EAAXA;EAPsC,CAAxC;EAUA,OAAO,CAACE,YAAD,EAAejB,MAAM,CAACT,OAAD,CAAN,CAAgBY,YAAhB,CAAf,CAAP;AACD,C;;AAtGUnB,O,CAwGJoC,Q,GAAW,UAACJ,aAAD,EAA+B;EAC/C,IAAMC,YAA+B,GAAG/B,cAAA,CAAMmC,UAAN,CAAiBrC,OAAO,CAACI,YAAzB,CAAxC;;EACA,OAAO6B,YAAY,CAACF,WAAb,CAAyBC,aAAzB,CAAP;AACD,C;;AA3GUhC,O,CA6GI2B,qB,GAAwB,UAACW,UAAD,EACCC,cADD,EACkC;EACvE,IAAID,UAAU,KAAK,eAAnB,EAAoC;IAClC,OAAOC,cAAP;EACD;;EACD,OAAOD,UAAP;AACD,C"},"metadata":{},"sourceType":"script"}