{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar FLEX_PREFIX = 'flex';\nvar FLEX_ROW_PREFIX = 'row';\nvar FLEX_WRAP_PREFIX = 'wrap';\nvar FLEX_START_PREFIX = 'start';\nvar FLEX_END_PREFIX = 'end';\nvar FLEX_REVERSE_PREFIX = 'reverse';\nvar FlexStartEndMapper = {\n  toRTL: function toRTL(value, rtl) {\n    if (!rtl || !value.startsWith(FLEX_PREFIX)) {\n      return value;\n    }\n\n    var isReverse = value.endsWith(FLEX_END_PREFIX);\n\n    if (isReverse) {\n      return FLEX_PREFIX + \"-\" + FLEX_START_PREFIX;\n    }\n\n    return FLEX_PREFIX + \"-\" + FLEX_END_PREFIX;\n  }\n};\nvar FlexRowMapper = {\n  toRTL: function toRTL(value, rtl) {\n    if (!rtl || !value.startsWith(FLEX_ROW_PREFIX)) {\n      return value;\n    }\n\n    var isReverse = value.endsWith(FLEX_REVERSE_PREFIX);\n\n    if (isReverse) {\n      return FLEX_ROW_PREFIX;\n    }\n\n    return FLEX_ROW_PREFIX + \"-\" + FLEX_REVERSE_PREFIX;\n  }\n};\nvar FlexWrapMapper = {\n  toRTL: function toRTL(value, rtl) {\n    if (!rtl || !value.startsWith(FLEX_WRAP_PREFIX)) {\n      return value;\n    }\n\n    var isReverse = value.endsWith(\"-\" + FLEX_REVERSE_PREFIX);\n\n    if (isReverse) {\n      return FLEX_WRAP_PREFIX;\n    }\n\n    return FLEX_WRAP_PREFIX + \"-\" + FLEX_REVERSE_PREFIX;\n  }\n};\nexports.RtlFlexMap = {\n  alignContent: FlexStartEndMapper,\n  alignItems: FlexStartEndMapper,\n  alignSelf: FlexStartEndMapper,\n  justifyContent: FlexStartEndMapper,\n  flexDirection: FlexRowMapper,\n  flexWrap: FlexWrapMapper\n};","map":{"version":3,"sources":["../../../../../../src/components/devsupport/services/rtl/rtlFlexMap.ts"],"names":[],"mappings":";;;;;AAAA,IAAM,WAAW,GAAW,MAA5B;AACA,IAAM,eAAe,GAAW,KAAhC;AACA,IAAM,gBAAgB,GAAW,MAAjC;AACA,IAAM,iBAAiB,GAAW,OAAlC;AACA,IAAM,eAAe,GAAW,KAAhC;AACA,IAAM,mBAAmB,GAAW,SAApC;AAOA,IAAM,kBAAkB,GAA0B;EAChD,KADgD,iBAC1C,KAD0C,EAC3B,GAD2B,EACf;IAC/B,IAAI,CAAC,GAAD,IAAQ,CAAC,KAAK,CAAC,UAAN,CAAiB,WAAjB,CAAb,EAA4C;MAC1C,OAAO,KAAP;IACD;;IAED,IAAM,SAAS,GAAY,KAAK,CAAC,QAAN,CAAe,eAAf,CAA3B;;IAEA,IAAI,SAAJ,EAAe;MACb,OAAU,WAAV,SAAyB,iBAAzB;IACD;;IAED,OAAU,WAAV,SAAyB,eAAzB;EACD;AAb+C,CAAlD;AAqBA,IAAM,aAAa,GAA0B;EAC3C,KAD2C,iBACrC,KADqC,EACtB,GADsB,EACV;IAC/B,IAAI,CAAC,GAAD,IAAQ,CAAC,KAAK,CAAC,UAAN,CAAiB,eAAjB,CAAb,EAAgD;MAC9C,OAAO,KAAP;IACD;;IAED,IAAM,SAAS,GAAY,KAAK,CAAC,QAAN,CAAe,mBAAf,CAA3B;;IAEA,IAAI,SAAJ,EAAe;MACb,OAAO,eAAP;IACD;;IAED,OAAU,eAAV,SAA6B,mBAA7B;EACD;AAb0C,CAA7C;AAqBA,IAAM,cAAc,GAA0B;EAC5C,KAD4C,iBACtC,KADsC,EACvB,GADuB,EACX;IAC/B,IAAI,CAAC,GAAD,IAAQ,CAAC,KAAK,CAAC,UAAN,CAAiB,gBAAjB,CAAb,EAAiD;MAC/C,OAAO,KAAP;IACD;;IAED,IAAM,SAAS,GAAY,KAAK,CAAC,QAAN,OAAmB,mBAAnB,CAA3B;;IAEA,IAAI,SAAJ,EAAe;MACb,OAAO,gBAAP;IACD;;IAED,OAAU,gBAAV,SAA8B,mBAA9B;EACD;AAb2C,CAA9C;AAmBa,OAAA,CAAA,UAAA,GAAiD;EAC5D,YAAY,EAAE,kBAD8C;EAE5D,UAAU,EAAE,kBAFgD;EAG5D,SAAS,EAAE,kBAHiD;EAI5D,cAAc,EAAE,kBAJ4C;EAK5D,aAAa,EAAE,aAL6C;EAM5D,QAAQ,EAAE;AANkD,CAAjD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst FLEX_PREFIX = 'flex';\nconst FLEX_ROW_PREFIX = 'row';\nconst FLEX_WRAP_PREFIX = 'wrap';\nconst FLEX_START_PREFIX = 'start';\nconst FLEX_END_PREFIX = 'end';\nconst FLEX_REVERSE_PREFIX = 'reverse';\n/**\n * Works with FlexBox style properties that starts with `flex` and ends with `-start` or `-end`\n *\n * E.g justifyContent: flex-start\n */\nconst FlexStartEndMapper = {\n    toRTL(value, rtl) {\n        if (!rtl || !value.startsWith(FLEX_PREFIX)) {\n            return value;\n        }\n        const isReverse = value.endsWith(FLEX_END_PREFIX);\n        if (isReverse) {\n            return `${FLEX_PREFIX}-${FLEX_START_PREFIX}`;\n        }\n        return `${FLEX_PREFIX}-${FLEX_END_PREFIX}`;\n    },\n};\n/**\n * Works with FlexBox style properties that starts with `row` and optionally ends with `-reverse`\n *\n * E.g flexDirection: row-reverse\n */\nconst FlexRowMapper = {\n    toRTL(value, rtl) {\n        if (!rtl || !value.startsWith(FLEX_ROW_PREFIX)) {\n            return value;\n        }\n        const isReverse = value.endsWith(FLEX_REVERSE_PREFIX);\n        if (isReverse) {\n            return FLEX_ROW_PREFIX;\n        }\n        return `${FLEX_ROW_PREFIX}-${FLEX_REVERSE_PREFIX}`;\n    },\n};\n/**\n * Works with FlexBox style properties that starts with `wrap` and optionally ends with `-reverse`\n *\n * E.g flexWrap: wrap-reverse\n */\nconst FlexWrapMapper = {\n    toRTL(value, rtl) {\n        if (!rtl || !value.startsWith(FLEX_WRAP_PREFIX)) {\n            return value;\n        }\n        const isReverse = value.endsWith(`-${FLEX_REVERSE_PREFIX}`);\n        if (isReverse) {\n            return FLEX_WRAP_PREFIX;\n        }\n        return `${FLEX_WRAP_PREFIX}-${FLEX_REVERSE_PREFIX}`;\n    },\n};\n/**\n * Matches FlexBox style properties that can affect on Layout depending on LTR/RTL mode corresponding Mappers\n */\nexports.RtlFlexMap = {\n    alignContent: FlexStartEndMapper,\n    alignItems: FlexStartEndMapper,\n    alignSelf: FlexStartEndMapper,\n    justifyContent: FlexStartEndMapper,\n    flexDirection: FlexRowMapper,\n    flexWrap: FlexWrapMapper,\n};\n//# sourceMappingURL=rtlFlexMap.js.map"]},"metadata":{},"sourceType":"script"}