{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _State = _interopRequireDefault(require(\"../State\"));\n\nvar _constants = require(\"./constants\");\n\nvar NodeManager = _interopRequireWildcard(require(\"./NodeManager\"));\n\nvar _excluded = [\"enabled\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _gestureInstances = 0;\n\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, GestureHandler);\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.view = null;\n    this.config = {};\n    this.hammer = null;\n    this.pendingGestures = {};\n    this.oldState = _State.default.UNDETERMINED;\n    this.previousState = _State.default.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.clearSelfAsPending = function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    };\n\n    this.destroy = function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop();\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    };\n\n    this.isPointInView = function (_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n\n    this.sendEvent = function (nativeEvent) {\n      var _this$ref$props = _this.ref.props,\n          onHandlerStateChange = _this$ref$props.onGestureHandlerStateChange,\n          onGestureEvent = _this$ref$props.onGestureHandlerEvent;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n      }\n    };\n\n    this.sync = function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture = _step2.value;\n\n              if (!_gesture.isDiscrete && _gesture.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this._hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    };\n\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  (0, _createClass2.default)(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this._gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent() {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"parseNativeEvent\",\n    value: function parseNativeEvent(nativeEvent) {\n      return nativeEvent;\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n          enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n          props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      return _constants.EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.ref = ref;\n      this.view = (0, _reactNative.findNodeHandle)(ref);\n      this.hammer = new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.default.UNDETERMINED;\n      this.previousState = _State.default.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          return _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n          deltaY = _ref4.deltaY,\n          rotation = _ref4.rotation;\n      this.oldState = _State.default.UNDETERMINED;\n      this.previousState = _State.default.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {}\n  }]);\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var _argMapping$index = (0, _slicedToArray2.default)(argMapping[index], 2),\n                  key = _argMapping$index[0],\n                  value = _argMapping$index[1];\n\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref6) {\n      var _handlerTag = _ref6._handlerTag;\n      return NodeManager.getHandler(_handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'].forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nvar _default = GestureHandler;\nexports.default = _default;","map":{"version":3,"names":["_gestureInstances","GestureHandler","isGestureRunning","hasGestureFailed","view","config","hammer","pendingGestures","oldState","State","UNDETERMINED","previousState","lastSentState","clearSelfAsPending","Array","isArray","waitFor","gesture","removePendingGesture","id","destroy","stop","isPointInView","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","ref","props","onHandlerStateChange","onGestureHandlerStateChange","onGestureEvent","onGestureHandlerEvent","event","transformEventData","invokeNullableMethod","state","sync","get","name","enable","recognizer","inputData","enabled","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","_hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","isGestureEnabledForEvent","getConfig","success","failed","simulateCancelEvent","params","getHammerConfig","set","_gestureInstance","Error","ensureConfig","updateHasCustomActivationCriteria","addPendingGesture","type","EventMap","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","getState","transformNativeEvent","handlerTag","target","timeStamp","Date","now","Object","values","cancelEvent","onWaitingEnded","cancelPendingGestures","notifyPendingGestures","Hammer","INPUT_CANCEL","isFinal","onGestureEnded","isFirst","findNodeHandle","Manager","NativeGestureClass","add","on","ev","onRawEvent","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","stillWaiting","filter","pointers","minPointers","method","__getHandler","handler","argMapping","__nodeConfig","index","key","value","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_handlerTag","NodeManager","getHandler","v","forEach","prop","Number","NaN"],"sources":["C:/wks/reactnative/prueba/kitten2/node_modules/react-native-gesture-handler/web/GestureHandler.js"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport State from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\nlet _gestureInstances = 0;\n\nclass GestureHandler {\n  isGestureRunning = false;\n  hasGestureFailed = false;\n  view = null;\n  config = {};\n  hammer = null;\n  pendingGestures = {};\n  oldState = State.UNDETERMINED;\n  previousState = State.UNDETERMINED;\n  lastSentState = null;\n\n  get id() {\n    return `${this.name}${this._gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this._gestureInstance = _gestureInstances++;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(gesture) {}\n\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent() {\n    return { success: true };\n  }\n\n  parseNativeEvent(nativeEvent) {\n    return nativeEvent;\n  }\n\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this._hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop();\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }) => {\n    const rect = this.view.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type) {\n    return EventMap[type];\n  }\n\n  transformEventData(event) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    const state = this.getState(eventType);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(event) {\n    return {};\n  }\n\n  sendEvent = nativeEvent => {\n    const {\n      onGestureHandlerStateChange: onHandlerStateChange,\n      onGestureHandlerEvent: onGestureEvent,\n    } = this.ref.props;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod('onGestureEvent', onGestureEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state;\n      invokeNullableMethod('onHandlerStateChange', onHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    if (!this.isDiscrete) {\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event =>\n        this.onGestureEnded(event)\n      );\n    }\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev));\n  }\n\n  onStart({ deltaX, deltaY, rotation }) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer, inputData) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this._hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(inputData) {}\n}\n\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(name, method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(name, handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key, value] = argMapping[index];\n              if (key in event.nativeEvent) {\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config) {\n  const props = { ...config };\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ _handlerTag }) => NodeManager.getHandler(_handlerTag))\n      .filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ].forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}